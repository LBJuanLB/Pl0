/* TOKENS */
literals = '+-*/()[],.;:<>"'
FLOAT = r'(\+|-)?([0]|[1-9][0-9]*)(\.[0-9]+((e|E)(\+|-)?[0-9]+)?|(e|E)(\+|-)?[0-9]+)'
INT = r'((\+|-)?[1-9][0-9]*)|[0]'
LITERAL = r'"([^"]*)"'
MEI    =r'<='
MAI    =r'>='
II     =r'=='
DI     =r'!='
WHILE = r'[Ww][Hh][Ii][Ll][Ee]\b'
ASIG   =r':='
NOT    =r'[Nn][oO][Tt]\b'
FUN    = r'[Ff][uU][Nn]\b'
READ   = r'[rR][eE][aA][dD]\b' 
WRITE   = r'[wW][rR][iI][Tt][eE]\b'
PRINT  = r'[Pp][Rr][Ii][Nn][Tt]\b'
DO   = r'[Dd][Oo]\b'
IF     = r'[iI][fF]\b'
THEN   = r'[Tt][Hh][Ee][Nn]\b'
ELSE =r'[Ee][Ll][Ss][Ee]\b'
END    = r'[Ee][Nn][Dd]\b'
BREAK  = r'[Bb][Rr][Ee][Aa][Kk]\b'
RETURN = r'[Rr][Ee][Tt][uU][rR][nN]\b'
SKIP= r'[sS][Kk][iI][pP]\b'
BEGIN    = r'[Bb][Ee][Gg][Ii][Nn]\b'
AND    = r'[Aa][Nn][Dd]\b'
OR    = r'[Oo][Rr]\b'
FLOAT_T  = r'[Ff][Ll][Oo][Aa][Tt]\b'
INT_T = r'[iI][Nn][tT]\b'
NAME = r'[a-zA-Z]+[0-9]*[a-zA-Z]*'

/* CFG */

program ::= funclist

funclist ::= funclist function | function

function ::= 'FUN' NAME '(' [ arglist ] ')' locals 'BEGIN' statements 'END'

statements ::= statements ';' statement | statement

statement ::= 'WHILE' relation 'DO' statement
             |'IF' relation 'THEN' statement ['ELSE' statement]
             |location ':=' expr
             |'PRINT' '(' LITERAL ')'
             |'WRITE' '(' expr ')'
             |'READ' '(' location ')'
             |'RETURN' expr
             | NAME '(' exprlist ')'
             | 'SKIP' 
             | 'BREAK' 
             | 'BEGIN' statements 'END'

expr ::= expr '+' expr
        |expr '-' expr
        |expr '*' expr
        |expr '/' expr
        |'-' expr
        |'+' expr
        |'(' expr ')'
        |NAME '[' expr ']'
        |NAME '(' exprlist ')'
        |NAME
        |INT
        |FLOAT
        |('INT' | 'FLOAT') '(' expr ')'
        
exprlist ::= exprlist ',' expr | expr

relation ::= expr ('<'|'<='|'>'|'>='|'=='|'!=') expr 
            | relation ('AND'|'OR') relation 
            | 'NOT' relation 
            | '(' relation ')'

arg ::= NAME ':' ('INT' | 'FLOAT' ) ['[' expr ']']

arglist ::= arglist ',' arg | arg

locals ::= (arg | function) ';' {locals}

location ::= NAME | NAME '[' expr ']'

INT ::= ((\+|-)?[1-9][0-9]*)|[0]

FLOAT ::= (\+|-)?([0]|[1-9][0-9]*)(\.[0-9]+((e|E)(\+|-)?[0-9]+)?|(e|E)(\+|-)?[0-9]+)

NAME ::= [a-zA-Z_]+[0-9-a-zA-Z_]*

LITERAL ::= "([^"]*)"

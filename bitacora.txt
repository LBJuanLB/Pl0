
Carlos Andres angola berrio - 1118201113
Juan Jose Espinosa Mendez - 1054538340
Se esta construyendo  la gramatica para el compilador PL0 construido en BNF 


Componentes Terminales

    number: Representa un número en el lenguaje. Puede ser un entero o un número de punto flotante. Los números enteros consisten en una o más cifras, mientras que los números de punto flotante tienen un punto decimal seguido de una o más cifras decimales.

    name: Representa un identificador en el lenguaje. Puede consistir en una o más letras (mayúsculas o minúsculas).

    literal: Representa una secuencia de caracteres que puede ser cualquier cosa (.*). Esto parece ser un valor arbitrario que se imprime tal cual.

    relation: Representa expresiones relacionales que pueden comparar dos expresiones. Incluye operadores como >, <, >=, <=, == y !=.

    exprlist: Aparentemente, se define como una lista de expresiones separadas por comas, pero la definición está en blanco.

    relaciones: Define expresiones relacionales, como operaciones and, or y not en relaciones.

Componentes No Terminales

La gramática también incluye varios componentes no terminales que se refieren a estructuras y operaciones específicas del lenguaje de programación:

    statement: Representa una instrucción en el lenguaje. Incluye declaraciones de bucles, condicionales, asignaciones, impresiones, lecturas, retornos, llamadas a funciones, sentencias "skip", operaciones de expresiones y el bloque "begin...end".

    asignamt: Define asignaciones de variables o arreglos.

    relation: Define relaciones entre expresiones. Pueden ser operaciones relacionales como mayor que, menor que, igual a, etc.

    expr: Define expresiones matemáticas y lógicas que involucran números, variables, operadores y llamadas a funciones.
-------------------------------------------------------------------
Clase 21/09/23:

    Inicio del desarrollo del analizador léxico basándonos en el analizador léxico para el lenguaje BASIC Darmouth 64 - baslex.py.
    Identificación y especificación de tokens mediante la revisión de la gramática previamente establecida.

Clase 26/09/23:

    Verificación exhaustiva para garantizar la inclusión de todos los tokens necesarios.
    Utilización del programa de ejemplo contenido en el archivo de especificaciones (programa.txt) para validar la correcta identificación de tokens.
    Corrección de problemas donde ciertos identificadores, como "done", eran interpretados incorrectamente.

Clase 28/09/23:

    Modificación del analizador léxico para ignorar comentarios y detección de errores, como comentarios o strings no terminados y errores de formato numérico.
    Adición de la restricción de que los identificadores no pueden comenzar con un número.
    Mejora en la presentación de tokens mediante una tabla.

Clase 05/10/23:

    Incorporación de errores para strings no terminados.
    Inicio del análisis de la estructura del parser.
    Implementación de la concatenación de strings en una misma línea (e.g., "Hola" "Mundo").

Clase 12/10/23:

    Comparación y corrección de errores en nuestra gramática en comparación con la del profesor.

Clase 19/10/23:

    Descripción de reglas en el parser y especificación de los nodos necesarios.

Clase 26/10/23:

    Solución de problemas y ajustes en el parser para su ejecución.
    Pruebas exitosas con todos los test2. Dificultades con los ejemplos de big----.pl0 debido a un error de recursividad, aún por resolver.
    Agregada detección de errores en el parser.

Clase 02/11/23:

    Implementación de un método para imprimir el árbol AST. La estructura actual necesita mejoras para cumplir con los requisitos de indentación.

Clase 09/11/23:

    Avances en la funcionalidad semántica del compilador.
    Creación de clases base para el chequeo semántico (Checker y SymbolTable).
    Implementación inicial de métodos en la clase Checker para el análisis de nodos AST.

Clase 11/11/23:

    Finalización de la implementación de la funcionalidad semántica.
    Pruebas y depuración de los métodos Checker con ejercicios de test3.
    Identificación y corrección de errores durante las pruebas.

18/11/23:

    Modificaciones al lexer y al parser para invocarlos desde el archivo pl0.py.
    Creación de un archivo de instrucciones centrado en la parte intermedia del compilador.

21/11/23:

    Adición de precedencia al parser para abordar y eliminar conflictos "shift-reduce".

24/11/23:

    Actualización de la gramática para detectar ciclos "for".
    Mejoras en la parte intermedia del compilador.
    Actualizacion del Checker para dectectar el READ Y PRINT
    Pruebas exhaustivas para garantizar el correcto funcionamiento del compilador con diversos ejemplos como casos de prueba.